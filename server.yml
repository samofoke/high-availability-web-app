AWSTemplateFormatVersion: 2010-09-09

Description: Server Infrastructure provisioning by Sabata

Parameters:
  EnvironmentName:
    Description: the env name that will be prefixed for resources.
    Type: String

  MinSizeEC2Servers:
    Description: Set the minimum number of server/ec2 instances
    Type: Number
    Default: 4

  MaxSizeEC2Servers:
    Description: Set the minimum number of server/ec2 instances
    Type: Number
    Default: 6

Resources:
  MyEC2ReadOnlyS3Role:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref MyEC2ReadOnlyS3Role

  LoadBalancerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http requests to the Load Balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and SSH requests to the Web Server
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          sudo rm index.html
          sudo aws s3 cp s3://udacity-demo-1/udacity.zip .
          sudo unzip -o udacity.zip
          systemctl start apache2.service
      ImageId: ami-08fdec01f5df9998f
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.medium
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: !Ref MinSizeEC2Servers
      MaxSize: !Ref MaxSizeEC2Servers
      HealthCheckGracePeriod: 60
      HealthCheckType: ELB
      TargetGroupARNs:
        - Ref: WebServerTargetGroup

  WebServerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-SUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-SUB2-SN"
      SecurityGroups:
        - Ref: LoadBalancerSecGroup

  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebServerTargetGroup
      LoadBalancerArn:
        Ref: WebServerLoadBalancer
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebServerTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

Outputs:
  LoadBalancerDnsName:
    Description: The DNS name for the Load balancer.
    Value: !Sub "http://${WebServerLoadBalancer.DNSName}"
